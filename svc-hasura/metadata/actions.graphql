type Mutation {
  actionCreateAdminAuthToken(
    userUid: uuid!
  ): CreateAdminAuthTokenOutput
}

type Mutation {
  actionCreateAuthToken(
    email: String!
    password: String!
    deviceId: String!
    deviceName: String!
    deviceTrusted: Boolean!
    token2fa: String
    role: String!
  ): CreateAuthTokenOutput
}

type Mutation {
  actionCreateDcaOrder(
    userExchangeKeysUid: uuid!
    marketUid: uuid!
    primaryCurrency: String!
    secondaryCurrency: String!
    startAt: timestamp!
    marketOffset: Float!
    dailyAverage: Float!
    intervalMs: Int!
    minPrice: Float
    maxPrice: Float
    minValue: Float
    maxValue: Float
  ): CreateDcaOrderResult
}

type Mutation {
  actionCreateStripeSubscription(
    priceId: String
  ): CreateStripeSubscription!
}

type Mutation {
  actionCreateUser(
    email: String!
    password: String!
  ): CreateUserOutput
}

type Mutation {
  actionCreateUserExchangeKeys(
    exchangeUid: uuid!
    keys: jsonb!
    description: String!
  ): CreateUserExchangeKeysOutput
}

type Mutation {
  actionDeleteUser: DeleteUserOutput
}

type Mutation {
  actionDeleteUser2fa(
    token: String!
  ): DeleteUser2FAOutput
}

type Mutation {
  actionEnableUser2fa(
    name: String!
    secret: String!
    token: String!
  ): EnableUser2FAOutput
}

type Query {
  actionQueryLiveStripeSubscription(
    subscriptionId: String!
  ): QueryLiveStripeSubscriptionOutput!
}

type Query {
  actionQueryStripeConfig: QueryStripeConfigOutput!
}

type Query {
  actionQueryUserEmail(
    userUid: uuid!
  ): QueryUserEmailOutput
}

type Query {
  actionQueryUserLimit: QueryUserLimitOutput
}

type Mutation {
  actionRefreshAuthToken: RefreshAuthTokenOutput
}

type Mutation {
  actionResetUserPassword(
    passwordResetSecret: String!
    newPassword: String!
    deviceId: String!
    deviceName: String!
    deviceTrusted: Boolean!
    token2fa: String
  ): ResetUserPasswordOutput!
}

type Mutation {
  actionSeedTestAccount(
    email: String!
  ): SeedTestAccountOutput!
}

type Mutation {
  actionSendUserEmailVerify: SendUserEmailVerifyOutput!
}

type Mutation {
  actionSendUserPasswordReset(
    email: String!
  ): SendUserPasswordResetOutput!
}

type Query {
  actionSetupUser2fa: SetupUser2FAOutput
}

type Mutation {
  actionSyncCurrencyFx(
    startDate: timestamptz!
    endDate: timestamptz!
    fromSymbol: String!
    toSymbol: String!
  ): SyncCurrencyFxOutput
}

type Mutation {
  actionSyncExchangeOpenOrderList(
    userExchangeKeysUid: uuid!
  ): SyncExchangeOpenOrderListOutput
}

type Mutation {
  actionSyncExchangeTradeList(
    userExchangeKeysUid: uuid!
    forceSync: Boolean
  ): SyncExchangeTradeListOutput
}

type Mutation {
  actionUpdateDcaOrder(
    dcaOrderUid: uuid!
    enabled: Boolean!
  ): UpdateDcaOrderOutput!
}

type Mutation {
  actionUpdateStripeSubscription(
    subscriptionId: String!
    cancelAtPeriodEnd: Boolean!
  ): UpdateSubscriptionOutput!
}

type Mutation {
  actionUpdateUser(
    email: String
    password: String
  ): UpdateUserOutput!
}

type Mutation {
  actionUpdateUserExchangeKeys(
    userExchangeKeysUid: uuid!
    keys: jsonb
    description: String
  ): UpdateUserExchangeKeysOutput
}

type Mutation {
  actionValidateUserExchangeKeys(
    userExchangeKeysUid: uuid!
  ): ValidateUserExchangeKeysOutput
}

type Mutation {
  actionValidateUserExchangeKeysLive(
    exchangeUid: uuid!
    keys: jsonb!
  ): ValidateUserExchangeKeysLiveOutput
}

type Mutation {
  actionValidateUserPasswordReset(
    passwordResetSecret: String!
  ): ValidatUserPasswordResetOutput!
}

type Mutation {
  actionVerifyUserEmail(
    emailVerifySecret: String!
  ): VerifyUserEmailOutput!
}

input SampleInput {
  username: String!
  password: String!
}

input QueryUserEmailInput {
  userUid: uuid!
}

input SeedTestAccountInput {
  email: String!
}

input QuerySubscriptionsInput {
  status: String!
}

type SampleOutput {
  accessToken: String!
}

type CreateUserOutput {
  userUid: String!
}

type CreateAuthTokenOutput {
  userUid: String!
  authToken: String!
  expiresAt: timestamptz!
}

type GetEmailOutput {
  email: String!
}

type SetUserExchangeKeysOutput {
  userExchangeKeysUid: uuid!
}

type ValidateUserExchangeKeysOutput {
  userExchangeKeysUid: uuid!
  isValid: Boolean!
  validationMessage: String
}

type CreateDcaOrderResult {
  dcaOrderUid: uuid!
}

type SyncTradeListOutput {
  userUid: uuid!
}

type SyncExchangeTradeListOutput {
  userUid: uuid!
}

type CreateUserExchangeKeysOutput {
  userExchangeKeysUid: uuid!
}

type WebhookOutput {
  raw: jsonb!
}

type CreateCheckoutSession {
  sessionUrl: String!
}

type CreateCustomerPortalSession {
  sessionUrl: String!
}

type CustomerCheckoutSessionOutput {
  sessionUrl: String!
}

type UpdateUserPasswordOutput {
  userUid: uuid!
}

type UpdateUserOutput {
  userUid: uuid!
}

type EnableUser2FAOutput {
  userUid: uuid!
}

type SendUserPasswordResetOutput {
  email: String!
}

type ResetUserPasswordOutput {
  userUid: uuid!
  authToken: String!
  expiresAt: timestamptz!
}

type SendUserEmailVerifyOutput {
  userUid: uuid!
}

type VerifyUserEmailOutput {
  email: String!
}

type UpdateUserExchangeKeysOutput {
  userExchangeKeysUid: uuid!
}

type SyncExchangeOpenOrderListOutput {
  userUid: uuid!
}

type ValidateUserExchangeKeysLiveOutput {
  isValid: Boolean!
  validationMessage: String
}

type RefreshAuthTokenOutput {
  userUid: String!
  authToken: String!
  expiresAt: timestamptz!
}

type ValidatUserPasswordResetOutput {
  isValid: Boolean!
  email: String
}

type QueryUserEmailOutput {
  userUid: uuid!
  email: String!
}

type SyncCurrencyFxOutput {
  insertCount: Int!
}

type SetupUser2FAOutput {
  qrcode: String!
  secret: String!
}

type DeleteUser2FAOutput {
  userUid: uuid!
}

type DeleteUserOutput {
  userUid: uuid!
}

type QueryUserLimitOutput {
  userUid: String!
  userLimit: jsonb!
}

type UpdateDcaOrderOutput {
  dcaOrderUid: uuid!
}

type QueryPricesOutput {
  prices: [jsonb]
}

type QuerySubscriptionOutput {
  subscriptions: [jsonb]
}

type QuerySubscriptionsOutput {
  subscriptions: [StripeSubscription!]!
}

type CreateSubscription {
  subscriptionId: String!
  clientSecret: String!
}

type CancelSubscriptionOutput {
  subscription: [StripeSubscription!]!
}

type PriceOutput {
  interval: String
  intervalCount: Int
  currency: String!
  id: String!
  unitAmount: Int!
  type: String!
}

type QueryStripeConfigOutput {
  publishableKey: String!
}

type StripeSubscription {
  id: String
  object: String
  application: String
  applicationFeePercent: String
  billingCycleAnchor: Int
  billingThresholds: String
  cancelAt: String
  cancelAtPeriodEnd: Boolean
  canceledAt: String
  collectionMethod: String
  created: Int
  currency: String
  currentPeriodEnd: Int
  currentPeriodStart: Int
  customer: String
  daysUntilDue: String
  defaultPaymentMethod: String
  defaultSource: String
  description: String
  discount: String
  endedAt: String
  livemode: Boolean
  nextPendingInvoiceItemInvoice: String
  pauseCollection: String
  pendingInvoiceItemInterval: String
  pendingSetupIntent: String
  pendingUpdate: String
  quantity: Int
  schedule: String
  startDate: Int
  status: String
  testClock: String
  transferData: String
  trialEnd: String
  trialStart: String
  plan: Plan
  paymentSettings: PaymentSettings
  latestInvoice: LatestInvoice
  items: Items
  defaultTaxRates: [String]
  automaticTax: AutomaticTax
}

type StripeSubscriptionPaymentSettings {
  paymentMethodOptions: String
  paymentMethodTypes: String
}

type StripeSubscriptionAutomaticTax {
  enabled: Boolean
}

type StripeSubscriptionMetadata {
  lookupKey: String
}

type StripeSubscriptionRecurring {
  usageType: String
  trialPeriodDays: String
  interval: String
  intervalCount: Int
  aggregateUsage: String
}

type StripeSubscriptionPrice {
  lookupKey: String
  livemode: Boolean
  tiersMode: String
  created: Int
  billingScheme: String
  unitAmountDecimal: String
  active: Boolean
  currency: String
  object: String
  id: String
  unitAmount: Int
  transformQuantity: String
  nickname: String
  type: String
  product: String
  taxBehavior: String
  metadata: StripeSubscriptionMetadata
  recurring: StripeSubscriptionRecurring
}

type StripeSubscriptionPlan {
  amount: Int!
  usageType: String
  livemode: Boolean
  tiersMode: String
  trialPeriodDays: String
  created: Int
  transformUsage: String
  billingScheme: String
  active: Boolean
  interval: String
  currency: String!
  object: String
  id: String
  amountDecimal: String!
  nickname: String
  intervalCount: Int
  product: String
  aggregateUsage: String
  metadata: StripeSubscriptionMetadata
}

type StripeSubscriptionItemData {
  created: Int
  billingThresholds: String
  quantity: Int
  object: String
  id: String
  subscription: String
  taxRates: [String]
  price: StripeSubscriptionPrice
  plan: StripeSubscriptionPlan
}

type StripeSubscriptionItem {
  hasMore: Boolean
  url: String
  totalCount: Int
  object: String
  data: [StripeSubscriptionItemData]
}

type SeedTestAccountOutput {
  userUid: uuid!
  email: String!
}

type QueryIncompleteSubscriptionsOutput {
  accessToken: String!
}

type Plan {
  id: String
  object: String
  active: Boolean
  aggregateUsage: String
  amount: Int
  amountDecimal: String
  billingScheme: String
  created: Int
  currency: String
  interval: String
  intervalCount: Int
  livemode: Boolean
  nickname: String
  product: String
  tiersMode: String
  transformUsage: String
  trialPeriodDays: String
  usageType: String
}

type PaymentSettings {
  paymentMethodOptions: String
  paymentMethodTypes: String
  saveDefaultPaymentMethod: String
}

type StatusTransitions {
  finalizedAt: Int
  markedUncollectibleAt: String
  paidAt: String
  voidedAt: String
}

type Card {
  installments: String
  mandateOptions: String
  network: String
  requestThreeDSecure: String
}

type PaymentMethodOptions {
  card: Card
}

type Charges {
  object: String
  hasMore: Boolean
  totalCount: Int
  url: String
  data: [String]
}

type PaymentIntent {
  id: String
  object: String
  amount: Int
  amountCapturable: Int
  amountReceived: Int
  application: String
  applicationFeeAmount: String
  automaticPaymentMethods: String
  canceledAt: String
  cancellationReason: String
  captureMethod: String
  clientSecret: String
  confirmationMethod: String
  created: Int
  currency: String
  customer: String
  description: String
  invoice: String
  lastPaymentError: String
  livemode: Boolean
  nextAction: String
  onBehalfOf: String
  paymentMethod: String
  processing: String
  receiptEmail: String
  review: String
  setupFutureUsage: String
  shipping: String
  source: String
  statementDescriptor: String
  statementDescriptorSuffix: String
  status: String
  transferData: String
  transferGroup: String
  paymentMethodTypes: [String]
  paymentMethodOptions: PaymentMethodOptions
  charges: Charges
}

type ProrationDetails {
  creditedItems: String
}

type Recurring {
  aggregateUsage: String
  interval: String
  intervalCount: Int
  trialPeriodDays: String
  usageType: String
}

type Price {
  id: String
  object: String
  active: Boolean
  billingScheme: String
  created: Int
  currency: String
  customUnitAmount: String
  livemode: Boolean
  lookupKey: String
  nickname: String
  product: String
  taxBehavior: String
  tiersMode: String
  transformQuantity: String
  type: String
  unitAmount: Int
  unitAmountDecimal: String
  recurring: Recurring
}

type Period {
  end: Int
  start: Int
}

type Data {
  id: String
  object: String
  amount: Int
  amountExcludingTax: Int
  currency: String
  description: String
  discountable: Boolean
  livemode: Boolean
  proration: Boolean
  quantity: Int
  subscription: String
  subscriptionItem: String
  type: String
  unitAmountExcludingTax: String
  taxRates: [String]
  taxAmounts: [String]
  prorationDetails: ProrationDetails
  price: Price
  plan: Plan
  period: Period
  discounts: [String]
  discountAmounts: [String]
}

type Lines {
  object: String
  hasMore: Boolean
  totalCount: Int
  url: String
  data: [Data]
}

type AutomaticTax {
  enabled: Boolean
  status: String
}

type LatestInvoice {
  id: String
  object: String
  accountCountry: String
  accountName: String
  accountTaxIds: String
  amountDue: Int
  amountPaid: Int
  amountRemaining: Int
  application: String
  applicationFeeAmount: String
  attemptCount: Int
  attempted: Boolean
  autoAdvance: Boolean
  billingReason: String
  charge: String
  collectionMethod: String
  created: Int
  currency: String
  customFields: String
  customer: String
  customerAddress: String
  customerEmail: String
  customerName: String
  customerPhone: String
  customerShipping: String
  customerTaxExempt: String
  defaultPaymentMethod: String
  defaultSource: String
  description: String
  discount: String
  dueDate: String
  endingBalance: Int
  footer: String
  hostedInvoiceUrl: String
  invoicePdf: String
  lastFinalizationError: String
  livemode: Boolean
  nextPaymentAttempt: String
  number: String
  onBehalfOf: String
  paid: Boolean
  paidOutOfBand: Boolean
  periodEnd: Int
  periodStart: Int
  postPaymentCreditNotesAmount: Int
  prePaymentCreditNotesAmount: Int
  quote: String
  receiptNumber: String
  renderingOptions: String
  startingBalance: Int
  statementDescriptor: String
  status: String
  subscription: String
  subtotal: Int
  subtotalExcludingTax: Int
  tax: String
  testClock: String
  total: Int
  totalExcludingTax: Int
  transferData: String
  webhooksDeliveredAt: Int
  totalTaxAmounts: [String]
  totalDiscountAmounts: [String]
  statusTransitions: StatusTransitions
  paymentSettings: PaymentSettings
  paymentIntent: PaymentIntent
  lines: Lines
  discounts: [String]
  defaultTaxRates: [String]
  customerTaxIds: [String]
  automaticTax: AutomaticTax
}

type Items {
  object: String
  hasMore: Boolean
  totalCount: Int
  url: String
  data: [Data]
}

type QueryStripeSubscriptionOutput {
  id: String!
  clientSecret: String!
}

type QueryLiveStripeSubscriptionOutput {
  id: String!
  clientSecret: String!
}

type ResumeSubscriptionOutput {
  subscriptionId: String!
}

type CancelStripeSubscriptionOutput {
  subscriptionId: String!
}

type CreateStripeSubscription {
  subscriptionId: String!
  clientSecret: String!
}

type UpdateSubscriptionOutput {
  subscriptionId: String!
}

type CreateAdminAuthTokenOutput {
  userUid: String!
  authToken: String!
  expiresAt: timestamptz!
}


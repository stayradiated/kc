type Mutation {
  action_create_admin_auth_token(
    user_uid: uuid!
  ): CreateAdminAuthTokenOutput
}

type Mutation {
  action_create_auth_token(
    email: String!
    password: String!
    device_id: String!
    device_name: String!
    device_trusted: Boolean!
    token_2fa: String
    role: String!
  ): CreateAuthTokenOutput
}

type Mutation {
  action_create_dca_order(
    user_exchange_keys_uid: uuid!
    market_uid: uuid!
    primary_currency: String!
    secondary_currency: String!
    start_at: timestamp!
    market_offset: Float!
    daily_average: Float!
    interval_ms: Int!
    min_price: Float
    max_price: Float
    min_value: Float
    max_value: Float
  ): CreateDCAOrderResult
}

type Mutation {
  action_create_stripe_subscription(
    price_id: String
  ): CreateStripeSubscription!
}

type Mutation {
  action_create_user(
    email: String!
    password: String!
  ): CreateUserOutput
}

type Mutation {
  action_create_user_exchange_keys(
    exchange_uid: uuid!
    keys: jsonb!
    description: String!
  ): CreateUserExchangeKeysOutput
}

type Mutation {
  action_delete_user: DeleteUserOutput
}

type Mutation {
  action_delete_user_2fa(
    token: String!
  ): DeleteUser2FAOutput
}

type Mutation {
  action_enable_user_2fa(
    name: String!
    secret: String!
    token: String!
  ): EnableUser2FAOutput
}

type Query {
  action_query_live_stripe_subscription(
    subscription_id: String!
  ): QueryLiveStripeSubscriptionOutput!
}

type Query {
  action_query_stripe_config: QueryStripeConfigOutput!
}

type Query {
  action_query_user_email(
    user_uid: uuid!
  ): QueryUserEmailOutput
}

type Query {
  action_query_user_limit: QueryUserLimitOutput
}

type Mutation {
  action_refresh_auth_token: RefreshAuthTokenOutput
}

type Mutation {
  action_reset_user_password(
    password_reset_secret: String!
    new_password: String!
    device_id: String!
    device_name: String!
    device_trusted: Boolean!
    token_2fa: String
  ): ResetUserPasswordOutput!
}

type Mutation {
  action_seed_test_account(
    email: String!
  ): SeedTestAccountOutput!
}

type Mutation {
  action_send_user_email_verify: SendUserEmailVerifyOutput!
}

type Mutation {
  action_send_user_password_reset(
    email: String!
  ): SendUserPasswordResetOutput!
}

type Query {
  action_setup_user_2fa: SetupUser2FAOutput
}

type Mutation {
  action_sync_currency_fx(
    start_date: timestamptz!
    end_date: timestamptz!
    from_symbol: String!
    to_symbol: String!
  ): SyncCurrencyFxOutput
}

type Mutation {
  action_sync_exchange_open_order_list(
    user_exchange_keys_uid: uuid!
  ): SyncExchangeOpenOrderListOutput
}

type Mutation {
  action_sync_exchange_trade_list(
    user_exchange_keys_uid: uuid!
    force_sync: Boolean
  ): SyncExchangeTradeListOutput
}

type Mutation {
  action_update_dca_order(
    dca_order_uid: uuid!
    enabled: Boolean!
  ): UpdateDCAOrderOutput!
}

type Mutation {
  action_update_stripe_subscription(
    subscription_id: String!
    cancel_at_period_end: Boolean!
  ): UpdateSubscriptionOutput!
}

type Mutation {
  action_update_user(
    email: String
    password: String
  ): UpdateUserOutput!
}

type Mutation {
  action_update_user_exchange_keys(
    user_exchange_keys_uid: uuid!
    keys: jsonb
    description: String
  ): UpdateUserExchangeKeysOutput
}

type Mutation {
  action_validate_user_exchange_keys(
    user_exchange_keys_uid: uuid!
  ): ValidateUserExchangeKeysOutput
}

type Mutation {
  action_validate_user_exchange_keys_live(
    exchange_uid: uuid!
    keys: jsonb!
  ): ValidateUserExchangeKeysLiveOutput
}

type Mutation {
  action_validate_user_password_reset(
    password_reset_secret: String!
  ): ValidatUserPasswordResetOutput!
}

type Mutation {
  action_verify_user_email(
    email_verify_secret: String!
  ): VerifyUserEmailOutput!
}

input SampleInput {
  username: String!
  password: String!
}

input QueryUserEmailInput {
  user_uid: uuid!
}

input SeedTestAccountInput {
  email: String!
}

input QuerySubscriptionsInput {
  status: String!
}

type SampleOutput {
  accessToken: String!
}

type CreateUserOutput {
  user_uid: String!
}

type CreateAuthTokenOutput {
  user_uid: String!
  auth_token: String!
  expires_at: timestamptz!
}

type GetEmailOutput {
  email: String!
}

type SetUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type ValidateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
  is_valid: Boolean!
  validation_message: String
}

type CreateDCAOrderResult {
  dca_order_uid: uuid!
}

type SyncTradeListOutput {
  user_uid: uuid!
}

type SyncExchangeTradeListOutput {
  user_uid: uuid!
}

type CreateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type WebhookOutput {
  raw: jsonb!
}

type CreateCheckoutSession {
  session_url: String!
}

type CreateCustomerPortalSession {
  session_url: String!
}

type CustomerCheckoutSessionOutput {
  session_url: String!
}

type UpdateUserPasswordOutput {
  user_uid: uuid!
}

type UpdateUserOutput {
  user_uid: uuid!
}

type EnableUser2FAOutput {
  user_uid: uuid!
}

type SendUserPasswordResetOutput {
  email: String!
}

type ResetUserPasswordOutput {
  user_uid: uuid!
  auth_token: String!
  expires_at: timestamptz!
}

type SendUserEmailVerifyOutput {
  user_uid: uuid!
}

type VerifyUserEmailOutput {
  email: String!
}

type UpdateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type SyncExchangeOpenOrderListOutput {
  user_uid: uuid!
}

type ValidateUserExchangeKeysLiveOutput {
  is_valid: Boolean!
  validation_message: String
}

type RefreshAuthTokenOutput {
  user_uid: String!
  auth_token: String!
  expires_at: timestamptz!
}

type ValidatUserPasswordResetOutput {
  is_valid: Boolean!
  email: String
}

type QueryUserEmailOutput {
  user_uid: uuid!
  email: String!
}

type SyncCurrencyFxOutput {
  insert_count: Int!
}

type SetupUser2FAOutput {
  qrcode: String!
  secret: String!
}

type DeleteUser2FAOutput {
  user_uid: uuid!
}

type DeleteUserOutput {
  user_uid: uuid!
}

type QueryUserLimitOutput {
  user_uid: String!
  user_limit: jsonb!
}

type UpdateDCAOrderOutput {
  dca_order_uid: uuid!
}

type QueryPricesOutput {
  prices: [jsonb]
}

type QuerySubscriptionOutput {
  subscriptions: [jsonb]
}

type QuerySubscriptionsOutput {
  subscriptions: [StripeSubscription!]!
}

type CreateSubscription {
  subscription_id: String!
  client_secret: String!
}

type CancelSubscriptionOutput {
  subscription: [StripeSubscription!]!
}

type PriceOutput {
  interval: String
  interval_count: Int
  currency: String!
  id: String!
  unit_amount: Int!
  type: String!
}

type QueryStripeConfigOutput {
  publishable_key: String!
}

type StripeSubscription {
  id: String
  object: String
  application: String
  application_fee_percent: String
  billing_cycle_anchor: Int
  billing_thresholds: String
  cancel_at: String
  cancel_at_period_end: Boolean
  canceled_at: String
  collection_method: String
  created: Int
  currency: String
  current_period_end: Int
  current_period_start: Int
  customer: String
  days_until_due: String
  default_payment_method: String
  default_source: String
  description: String
  discount: String
  ended_at: String
  livemode: Boolean
  next_pending_invoice_item_invoice: String
  pause_collection: String
  pending_invoice_item_interval: String
  pending_setup_intent: String
  pending_update: String
  quantity: Int
  schedule: String
  start_date: Int
  status: String
  test_clock: String
  transfer_data: String
  trial_end: String
  trial_start: String
  plan: Plan
  payment_settings: PaymentSettings
  latest_invoice: LatestInvoice
  items: Items
  default_tax_rates: [String]
  automatic_tax: AutomaticTax
}

type StripeSubscriptionPaymentSettings {
  payment_method_options: String
  payment_method_types: String
}

type StripeSubscriptionAutomaticTax {
  enabled: Boolean
}

type StripeSubscriptionMetadata {
  lookup_key: String
}

type StripeSubscriptionRecurring {
  usage_type: String
  trial_period_days: String
  interval: String
  interval_count: Int
  aggregate_usage: String
}

type StripeSubscriptionPrice {
  lookup_key: String
  livemode: Boolean
  tiers_mode: String
  created: Int
  billing_scheme: String
  unit_amount_decimal: String
  active: Boolean
  currency: String
  object: String
  id: String
  unit_amount: Int
  transform_quantity: String
  nickname: String
  type: String
  product: String
  tax_behavior: String
  metadata: StripeSubscriptionMetadata
  recurring: StripeSubscriptionRecurring
}

type StripeSubscriptionPlan {
  amount: Int!
  usage_type: String
  livemode: Boolean
  tiers_mode: String
  trial_period_days: String
  created: Int
  transform_usage: String
  billing_scheme: String
  active: Boolean
  interval: String
  currency: String!
  object: String
  id: String
  amount_decimal: String!
  nickname: String
  interval_count: Int
  product: String
  aggregate_usage: String
  metadata: StripeSubscriptionMetadata
}

type StripeSubscriptionItemData {
  created: Int
  billing_thresholds: String
  quantity: Int
  object: String
  id: String
  subscription: String
  tax_rates: [String]
  price: StripeSubscriptionPrice
  plan: StripeSubscriptionPlan
}

type StripeSubscriptionItem {
  has_more: Boolean
  url: String
  total_count: Int
  object: String
  data: [StripeSubscriptionItemData]
}

type SeedTestAccountOutput {
  user_uid: uuid!
  email: String!
}

type QueryIncompleteSubscriptionsOutput {
  accessToken: String!
}

type Plan {
  id: String
  object: String
  active: Boolean
  aggregate_usage: String
  amount: Int
  amount_decimal: String
  billing_scheme: String
  created: Int
  currency: String
  interval: String
  interval_count: Int
  livemode: Boolean
  nickname: String
  product: String
  tiers_mode: String
  transform_usage: String
  trial_period_days: String
  usage_type: String
}

type PaymentSettings {
  payment_method_options: String
  payment_method_types: String
  save_default_payment_method: String
}

type StatusTransitions {
  finalized_at: Int
  marked_uncollectible_at: String
  paid_at: String
  voided_at: String
}

type Card {
  installments: String
  mandate_options: String
  network: String
  request_three_d_secure: String
}

type PaymentMethodOptions {
  card: Card
}

type Charges {
  object: String
  has_more: Boolean
  total_count: Int
  url: String
  data: [String]
}

type PaymentIntent {
  id: String
  object: String
  amount: Int
  amount_capturable: Int
  amount_received: Int
  application: String
  application_fee_amount: String
  automatic_payment_methods: String
  canceled_at: String
  cancellation_reason: String
  capture_method: String
  client_secret: String
  confirmation_method: String
  created: Int
  currency: String
  customer: String
  description: String
  invoice: String
  last_payment_error: String
  livemode: Boolean
  next_action: String
  on_behalf_of: String
  payment_method: String
  processing: String
  receipt_email: String
  review: String
  setup_future_usage: String
  shipping: String
  source: String
  statement_descriptor: String
  statement_descriptor_suffix: String
  status: String
  transfer_data: String
  transfer_group: String
  payment_method_types: [String]
  payment_method_options: PaymentMethodOptions
  charges: Charges
}

type ProrationDetails {
  credited_items: String
}

type Recurring {
  aggregate_usage: String
  interval: String
  interval_count: Int
  trial_period_days: String
  usage_type: String
}

type Price {
  id: String
  object: String
  active: Boolean
  billing_scheme: String
  created: Int
  currency: String
  custom_unit_amount: String
  livemode: Boolean
  lookup_key: String
  nickname: String
  product: String
  tax_behavior: String
  tiers_mode: String
  transform_quantity: String
  type: String
  unit_amount: Int
  unit_amount_decimal: String
  recurring: Recurring
}

type Period {
  end: Int
  start: Int
}

type Data {
  id: String
  object: String
  amount: Int
  amount_excluding_tax: Int
  currency: String
  description: String
  discountable: Boolean
  livemode: Boolean
  proration: Boolean
  quantity: Int
  subscription: String
  subscription_item: String
  type: String
  unit_amount_excluding_tax: String
  tax_rates: [String]
  tax_amounts: [String]
  proration_details: ProrationDetails
  price: Price
  plan: Plan
  period: Period
  discounts: [String]
  discount_amounts: [String]
}

type Lines {
  object: String
  has_more: Boolean
  total_count: Int
  url: String
  data: [Data]
}

type AutomaticTax {
  enabled: Boolean
  status: String
}

type LatestInvoice {
  id: String
  object: String
  account_country: String
  account_name: String
  account_tax_ids: String
  amount_due: Int
  amount_paid: Int
  amount_remaining: Int
  application: String
  application_fee_amount: String
  attempt_count: Int
  attempted: Boolean
  auto_advance: Boolean
  billing_reason: String
  charge: String
  collection_method: String
  created: Int
  currency: String
  custom_fields: String
  customer: String
  customer_address: String
  customer_email: String
  customer_name: String
  customer_phone: String
  customer_shipping: String
  customer_tax_exempt: String
  default_payment_method: String
  default_source: String
  description: String
  discount: String
  due_date: String
  ending_balance: Int
  footer: String
  hosted_invoice_url: String
  invoice_pdf: String
  last_finalization_error: String
  livemode: Boolean
  next_payment_attempt: String
  number: String
  on_behalf_of: String
  paid: Boolean
  paid_out_of_band: Boolean
  period_end: Int
  period_start: Int
  post_payment_credit_notes_amount: Int
  pre_payment_credit_notes_amount: Int
  quote: String
  receipt_number: String
  rendering_options: String
  starting_balance: Int
  statement_descriptor: String
  status: String
  subscription: String
  subtotal: Int
  subtotal_excluding_tax: Int
  tax: String
  test_clock: String
  total: Int
  total_excluding_tax: Int
  transfer_data: String
  webhooks_delivered_at: Int
  total_tax_amounts: [String]
  total_discount_amounts: [String]
  status_transitions: StatusTransitions
  payment_settings: PaymentSettings
  payment_intent: PaymentIntent
  lines: Lines
  discounts: [String]
  default_tax_rates: [String]
  customer_tax_ids: [String]
  automatic_tax: AutomaticTax
}

type Items {
  object: String
  has_more: Boolean
  total_count: Int
  url: String
  data: [Data]
}

type QueryStripeSubscriptionOutput {
  id: String!
  client_secret: String!
}

type QueryLiveStripeSubscriptionOutput {
  id: String!
  client_secret: String!
}

type ResumeSubscriptionOutput {
  subscription_id: String!
}

type CancelStripeSubscriptionOutput {
  subscription_id: String!
}

type CreateStripeSubscription {
  subscription_id: String!
  client_secret: String!
}

type UpdateSubscriptionOutput {
  subscription_id: String!
}

type CreateAdminAuthTokenOutput {
  user_uid: String!
  auth_token: String!
  expires_at: timestamptz!
}


type Mutation {
  cancel_subscription(
    subscription_id: String!
  ): CancelSubscriptionOutput
}

type Mutation {
  create_auth_token(
    email: String!
    password: String!
    device_id: String!
    device_name: String!
    device_trusted: Boolean!
    token_2fa: String
  ): CreateAuthTokenOutput
}

type Mutation {
  create_dca_order(
    user_exchange_keys_uid: uuid!
    market_uid: uuid!
    primary_currency: String!
    secondary_currency: String!
    start_at: timestamp!
    market_offset: Float!
    daily_average: Float!
    interval_ms: Int!
    min_price: Float
    max_price: Float
    min_value: Float
    max_value: Float
  ): CreateDCAOrderResult
}

type Mutation {
  create_subscription(
    price_id: String
  ): CreateSubscription
}

type Mutation {
  create_user(
    email: String!
    password: String!
  ): CreateUserOutput
}

type Mutation {
  create_user_exchange_keys(
    exchange_uid: uuid!
    keys: jsonb!
    description: String!
  ): CreateUserExchangeKeysOutput
}

type Mutation {
  delete_user: DeleteUserOutput
}

type Mutation {
  delete_user_2fa(
    token: String!
  ): DeleteUser2FAOutput
}

type Mutation {
  enable_user_2fa(
    name: String!
    secret: String!
    token: String!
  ): EnableUser2FAOutput
}

type Query {
  query_prices: [PriceOutput!]!
}

type Query {
  query_stripe_config: QueryStripeConfigOutput!
}

type Query {
  query_subscriptions: QuerySubscriptionsOutput
}

type Query {
  query_user_email(
    user_uid: uuid!
  ): QueryUserEmailOutput
}

type Query {
  query_user_limit: QueryUserLimitOutput
}

type Mutation {
  refresh_auth_token: RefreshAuthTokenOutput
}

type Mutation {
  reset_user_password(
    password_reset_secret: String!
    new_password: String!
    device_id: String!
    device_name: String!
    device_trusted: Boolean!
    token_2fa: String
  ): ResetUserPasswordOutput!
}

type Mutation {
  seed_test_account(
    email: String!
  ): SeedTestAccountOutput!
}

type Mutation {
  send_user_email_verify: SendUserEmailVerifyOutput!
}

type Mutation {
  send_user_password_reset(
    email: String!
  ): SendUserPasswordResetOutput!
}

type Query {
  setup_user_2fa: SetupUser2FAOutput
}

type Mutation {
  sync_currency_fx(
    start_date: timestamptz!
    end_date: timestamptz!
    from_symbol: String!
    to_symbol: String!
  ): SyncCurrencyFxOutput
}

type Mutation {
  sync_exchange_open_order_list(
    user_exchange_keys_uid: uuid!
  ): SyncExchangeOpenOrderListOutput
}

type Mutation {
  sync_exchange_trade_list(
    user_exchange_keys_uid: uuid!
    force_sync: Boolean
  ): SyncExchangeTradeListOutput
}

type Mutation {
  update_dca_order(
    dca_order_uid: uuid!
    enabled: Boolean!
  ): UpdateDCAOrderOutput!
}

type Mutation {
  update_user(
    email: String
    password: String
  ): UpdateUserOutput!
}

type Mutation {
  update_user_exchange_keys(
    user_exchange_keys_uid: uuid!
    keys: jsonb
    description: String
  ): UpdateUserExchangeKeysOutput
}

type Mutation {
  validate_user_exchange_keys(
    user_exchange_keys_uid: uuid!
  ): ValidateUserExchangeKeysOutput
}

type Mutation {
  validate_user_exchange_keys_live(
    exchange_uid: uuid!
    keys: jsonb!
  ): ValidateUserExchangeKeysLiveOutput
}

type Mutation {
  validate_user_password_reset(
    password_reset_secret: String!
  ): ValidatUserPasswordResetOutput!
}

type Mutation {
  verify_user_email(
    email_verify_secret: String!
  ): VerifyUserEmailOutput!
}

input SampleInput {
  username: String!
  password: String!
}

input QueryUserEmailInput {
  user_uid: uuid!
}

input SeedTestAccountInput {
  email: String!
}

type SampleOutput {
  accessToken: String!
}

type CreateUserOutput {
  user_uid: String!
}

type CreateAuthTokenOutput {
  user_uid: String!
  auth_token: String!
  expires_at: timestamptz!
}

type GetEmailOutput {
  email: String!
}

type SetUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type ValidateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
  is_valid: Boolean!
  validation_message: String
}

type CreateDCAOrderResult {
  dca_order_uid: uuid!
}

type SyncTradeListOutput {
  user_uid: uuid!
}

type SyncExchangeTradeListOutput {
  user_uid: uuid!
}

type CreateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type WebhookOutput {
  raw: jsonb!
}

type CreateCheckoutSession {
  session_url: String!
}

type CreateCustomerPortalSession {
  session_url: String!
}

type CustomerCheckoutSessionOutput {
  session_url: String!
}

type UpdateUserPasswordOutput {
  user_uid: uuid!
}

type UpdateUserOutput {
  user_uid: uuid!
}

type EnableUser2FAOutput {
  user_uid: uuid!
}

type SendUserPasswordResetOutput {
  email: String!
}

type ResetUserPasswordOutput {
  user_uid: uuid!
  auth_token: String!
  expires_at: timestamptz!
}

type SendUserEmailVerifyOutput {
  user_uid: uuid!
}

type VerifyUserEmailOutput {
  email: String!
}

type UpdateUserExchangeKeysOutput {
  user_exchange_keys_uid: uuid!
}

type SyncExchangeOpenOrderListOutput {
  user_uid: uuid!
}

type ValidateUserExchangeKeysLiveOutput {
  is_valid: Boolean!
  validation_message: String
}

type RefreshAuthTokenOutput {
  user_uid: String!
  auth_token: String!
  expires_at: timestamptz!
}

type ValidatUserPasswordResetOutput {
  is_valid: Boolean!
  email: String
}

type QueryUserEmailOutput {
  user_uid: uuid!
  email: String!
}

type SyncCurrencyFxOutput {
  insert_count: Int!
}

type SetupUser2FAOutput {
  qrcode: String!
  secret: String!
}

type DeleteUser2FAOutput {
  user_uid: uuid!
}

type DeleteUserOutput {
  user_uid: uuid!
}

type QueryUserLimitOutput {
  user_uid: String!
  user_limit: jsonb!
}

type UpdateDCAOrderOutput {
  dca_order_uid: uuid!
}

type QueryPricesOutput {
  prices: [jsonb]
}

type QuerySubscriptionOutput {
  subscriptions: [jsonb]
}

type QuerySubscriptionsOutput {
  subscriptions: [StripeSubscription!]!
}

type CreateSubscription {
  subscription_id: String!
  client_secret: String!
}

type CancelSubscriptionOutput {
  subscription: [StripeSubscription!]!
}

type PriceOutput {
  interval: String
  interval_count: Int
  currency: String!
  id: String!
  unit_amount: Int!
  type: String!
}

type QueryStripeConfigOutput {
  publishable_key: String!
}

type StripeSubscription {
  current_period_start: Int
  status: String!
  trial_start: String
  schedule: String
  discount: String
  livemode: Boolean
  created: Int
  billing_thresholds: String
  pending_invoice_item_interval: String
  quantity: Int
  start_date: Int
  cancel_at_period_end: Boolean
  collection_method: String
  pending_setup_intent: String
  transfer_data: String
  customer: String
  ended_at: String
  cancel_at: String
  application_fee_percent: String
  trial_end: String
  billing_cycle_anchor: Int
  object: String
  id: String!
  canceled_at: String
  latest_invoice: String
  next_pending_invoice_item_invoice: String
  pause_collection: String
  current_period_end: Int!
  default_payment_method: String
  pending_update: String
  default_source: String
  days_until_due: String
  payment_settings: StripeSubscriptionPaymentSettings
  default_tax_rates: [String]
  automatic_tax: StripeSubscriptionAutomaticTax
  items: StripeSubscriptionItem
  plan: StripeSubscriptionPlan!
}

type StripeSubscriptionPaymentSettings {
  payment_method_options: String
  payment_method_types: String
}

type StripeSubscriptionAutomaticTax {
  enabled: Boolean
}

type StripeSubscriptionMetadata {
  lookup_key: String
}

type StripeSubscriptionRecurring {
  usage_type: String
  trial_period_days: String
  interval: String
  interval_count: Int
  aggregate_usage: String
}

type StripeSubscriptionPrice {
  lookup_key: String
  livemode: Boolean
  tiers_mode: String
  created: Int
  billing_scheme: String
  unit_amount_decimal: String
  active: Boolean
  currency: String
  object: String
  id: String
  unit_amount: Int
  transform_quantity: String
  nickname: String
  type: String
  product: String
  tax_behavior: String
  metadata: StripeSubscriptionMetadata
  recurring: StripeSubscriptionRecurring
}

type StripeSubscriptionPlan {
  amount: Int!
  usage_type: String
  livemode: Boolean
  tiers_mode: String
  trial_period_days: String
  created: Int
  transform_usage: String
  billing_scheme: String
  active: Boolean
  interval: String
  currency: String!
  object: String
  id: String
  amount_decimal: String!
  nickname: String
  interval_count: Int
  product: String
  aggregate_usage: String
  metadata: StripeSubscriptionMetadata
}

type StripeSubscriptionItemData {
  created: Int
  billing_thresholds: String
  quantity: Int
  object: String
  id: String
  subscription: String
  tax_rates: [String]
  price: StripeSubscriptionPrice
  plan: StripeSubscriptionPlan
}

type StripeSubscriptionItem {
  has_more: Boolean
  url: String
  total_count: Int
  object: String
  data: [StripeSubscriptionItemData]
}

type SeedTestAccountOutput {
  user_uid: uuid!
  email: String!
}


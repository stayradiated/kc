/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v4.0.3), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {
  import type * as db from 'zapatos/db'

  // Got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 102
  }

  /* === schema: public === */

  /* --- enums --- */

  /* --- tables --- */

  export namespace market_price {
    export type Table = 'market_price'
    export interface Selectable {
      /**
       * **Market_price.id**
       * - `uuid` in database
       * - `NOT NULL`, no default
       */
      id: string
      /**
       * **Market_price.created_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      created_at: Date | null
      /**
       * **Market_price.updated_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      updated_at: Date | null
      /**
       * **Market_price.date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      date: Date | null
      /**
       * **Market_price.market_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      market_name: string | null
      /**
       * **Market_price.price**
       * - `float8` in database
       * - Nullable, no default
       */
      price: number | null
    }
    export interface JSONSelectable {
      /**
       * **Market_price.id**
       * - `uuid` in database
       * - `NOT NULL`, no default
       */
      id: string
      /**
       * **Market_price.created_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      created_at: db.TimestampTzString | null
      /**
       * **Market_price.updated_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      updated_at: db.TimestampTzString | null
      /**
       * **Market_price.date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      date: db.TimestampTzString | null
      /**
       * **Market_price.market_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      market_name: string | null
      /**
       * **Market_price.price**
       * - `float8` in database
       * - Nullable, no default
       */
      price: number | null
    }
    export interface Whereable {
      /**
       * **Market_price.id**
       * - `uuid` in database
       * - `NOT NULL`, no default
       */
      id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **Market_price.created_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      created_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >
      /**
       * **Market_price.updated_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      updated_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >
      /**
       * **Market_price.date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >
      /**
       * **Market_price.market_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      market_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **Market_price.price**
       * - `float8` in database
       * - Nullable, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **Market_price.id**
       * - `uuid` in database
       * - `NOT NULL`, no default
       */
      id: string | db.Parameter<string> | db.SQLFragment
      /**
       * **Market_price.created_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      created_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **Market_price.updated_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      updated_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **Market_price.date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **Market_price.market_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      market_name?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **Market_price.price**
       * - `float8` in database
       * - Nullable, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **Market_price.id**
       * - `uuid` in database
       * - `NOT NULL`, no default
       */
      id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
      /**
       * **Market_price.created_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      created_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **Market_price.updated_at**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      updated_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **Market_price.date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **Market_price.market_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      market_name?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **Market_price.price**
       * - `float8` in database
       * - Nullable, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
    }
    export type UniqueIndex = 'market_price_pkey'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | Array<keyof Updatable>>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column
    export type SQL = SQLExpression | SQLExpression[]
  }

  export namespace schema_migrations {
    export type Table = 'schema_migrations'
    export interface Selectable {
      /**
       * **Schema_migrations.version**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      version: string
    }
    export interface JSONSelectable {
      /**
       * **Schema_migrations.version**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      version: string
    }
    export interface Whereable {
      /**
       * **Schema_migrations.version**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      version?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **Schema_migrations.version**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      version: string | db.Parameter<string> | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **Schema_migrations.version**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      version?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
    }
    export type UniqueIndex = 'schema_migrations_pkey'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | Array<keyof Updatable>>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column
    export type SQL = SQLExpression | SQLExpression[]
  }

  /* === cross-table types === */

  export type Table = market_price.Table | schema_migrations.Table
  export type Selectable =
    | market_price.Selectable
    | schema_migrations.Selectable
  export type JSONSelectable =
    | market_price.JSONSelectable
    | schema_migrations.JSONSelectable
  export type Whereable = market_price.Whereable | schema_migrations.Whereable
  export type Insertable =
    | market_price.Insertable
    | schema_migrations.Insertable
  export type Updatable = market_price.Updatable | schema_migrations.Updatable
  export type UniqueIndex =
    | market_price.UniqueIndex
    | schema_migrations.UniqueIndex
  export type Column = market_price.Column | schema_migrations.Column
  export type AllTables = [market_price.Table, schema_migrations.Table]
  export type AllMaterializedViews = []

  export type SelectableForTable<T extends Table> = {
    market_price: market_price.Selectable
    schema_migrations: schema_migrations.Selectable
  }[T]

  export type JSONSelectableForTable<T extends Table> = {
    market_price: market_price.JSONSelectable
    schema_migrations: schema_migrations.JSONSelectable
  }[T]

  export type WhereableForTable<T extends Table> = {
    market_price: market_price.Whereable
    schema_migrations: schema_migrations.Whereable
  }[T]

  export type InsertableForTable<T extends Table> = {
    market_price: market_price.Insertable
    schema_migrations: schema_migrations.Insertable
  }[T]

  export type UpdatableForTable<T extends Table> = {
    market_price: market_price.Updatable
    schema_migrations: schema_migrations.Updatable
  }[T]

  export type UniqueIndexForTable<T extends Table> = {
    market_price: market_price.UniqueIndex
    schema_migrations: schema_migrations.UniqueIndex
  }[T]

  export type ColumnForTable<T extends Table> = {
    market_price: market_price.Column
    schema_migrations: schema_migrations.Column
  }[T]

  export type SQLForTable<T extends Table> = {
    market_price: market_price.SQL
    schema_migrations: schema_migrations.SQL
  }[T]
}

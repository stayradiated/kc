/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **market**
   * - Table in database
   */
  export namespace market {
    export type Table = 'market';
    export interface Selectable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'market_id_key' | 'market_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **market_price**
   * - Table in database
   */
  export namespace market_price {
    export type Table = 'market_price';
    export interface Selectable {
      /**
      * **market_price.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **market_price.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: Date;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **market_price.currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      currency: string;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number;
      /**
      * **market_price.price_nzd**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price_nzd: number;
    }
    export interface JSONSelectable {
      /**
      * **market_price.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **market_price.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: db.TimestampTzString;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **market_price.currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      currency: string;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number;
      /**
      * **market_price.price_nzd**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price_nzd: number;
    }
    export interface Whereable {
      /**
      * **market_price.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.price_nzd**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price_nzd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **market_price.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market_price.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **market_price.currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **market_price.price_nzd**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price_nzd: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **market_price.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market_price.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **market_price.currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **market_price.price_nzd**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price_nzd?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'market_price_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = market.Table | market_price.Table | schema_migrations.Table;
  export type Selectable = market.Selectable | market_price.Selectable | schema_migrations.Selectable;
  export type JSONSelectable = market.JSONSelectable | market_price.JSONSelectable | schema_migrations.JSONSelectable;
  export type Whereable = market.Whereable | market_price.Whereable | schema_migrations.Whereable;
  export type Insertable = market.Insertable | market_price.Insertable | schema_migrations.Insertable;
  export type Updatable = market.Updatable | market_price.Updatable | schema_migrations.Updatable;
  export type UniqueIndex = market.UniqueIndex | market_price.UniqueIndex | schema_migrations.UniqueIndex;
  export type Column = market.Column | market_price.Column | schema_migrations.Column;
  export type AllBaseTables = [market.Table, market_price.Table, schema_migrations.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [market.Table, market_price.Table, schema_migrations.Table];


  export type SelectableForTable<T extends Table> = {
    market: market.Selectable;
    market_price: market_price.Selectable;
    schema_migrations: schema_migrations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    market: market.JSONSelectable;
    market_price: market_price.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    market: market.Whereable;
    market_price: market_price.Whereable;
    schema_migrations: schema_migrations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    market: market.Insertable;
    market_price: market_price.Insertable;
    schema_migrations: schema_migrations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    market: market.Updatable;
    market_price: market_price.Updatable;
    schema_migrations: schema_migrations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    market: market.UniqueIndex;
    market_price: market_price.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    market: market.Column;
    market_price: market_price.Column;
    schema_migrations: schema_migrations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    market: market.SQL;
    market_price: market_price.SQL;
    schema_migrations: schema_migrations.SQL;
  }[T];

}

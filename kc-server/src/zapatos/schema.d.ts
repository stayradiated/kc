/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: kc === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **asset**
   * - Table in database
   */
  export namespace asset {
    export type Table = 'asset';
    export interface Selectable {
      /**
      * **asset.symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      symbol: string;
      /**
      * **asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **asset.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **asset.symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      symbol: string;
      /**
      * **asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **asset.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **asset.symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      symbol?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **asset.symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      symbol: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **asset.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **asset.symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      symbol?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **asset.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'asset_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customer**
   * - Table in database
   */
  export namespace customer {
    export type Table = 'customer';
    export interface Selectable {
      /**
      * **customer.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **customer.customer_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      customer_id: string;
    }
    export interface JSONSelectable {
      /**
      * **customer.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **customer.customer_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      customer_id: string;
    }
    export interface Whereable {
      /**
      * **customer.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer.customer_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      customer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **customer.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer.customer_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      customer_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **customer.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer.customer_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      customer_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'customer_pkey' | 'unique_customer_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **dca_order**
   * - Table in database
   */
  export namespace dca_order {
    export type Table = 'dca_order';
    export interface Selectable {
      /**
      * **dca_order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **dca_order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **dca_order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **dca_order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **dca_order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **dca_order.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **dca_order.start_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_at: Date;
      /**
      * **dca_order.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number;
      /**
      * **dca_order.daily_average**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      daily_average: number;
      /**
      * **dca_order.min_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_price: number | null;
      /**
      * **dca_order.max_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_price: number | null;
      /**
      * **dca_order.min_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_value: number | null;
      /**
      * **dca_order.max_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_value: number | null;
      /**
      * **dca_order.user_exchange_keys_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_exchange_keys_uid: string;
      /**
      * **dca_order.primary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **dca_order.enabled_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      enabled_at: Date | null;
      /**
      * **dca_order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
    }
    export interface JSONSelectable {
      /**
      * **dca_order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **dca_order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **dca_order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **dca_order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **dca_order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **dca_order.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **dca_order.start_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_at: db.TimestampTzString;
      /**
      * **dca_order.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number;
      /**
      * **dca_order.daily_average**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      daily_average: number;
      /**
      * **dca_order.min_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_price: number | null;
      /**
      * **dca_order.max_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_price: number | null;
      /**
      * **dca_order.min_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_value: number | null;
      /**
      * **dca_order.max_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_value: number | null;
      /**
      * **dca_order.user_exchange_keys_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_exchange_keys_uid: string;
      /**
      * **dca_order.primary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **dca_order.enabled_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      enabled_at: db.TimestampTzString | null;
      /**
      * **dca_order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
    }
    export interface Whereable {
      /**
      * **dca_order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.start_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.daily_average**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      daily_average?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.min_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.max_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.min_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.max_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.user_exchange_keys_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_exchange_keys_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.primary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.enabled_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      enabled_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dca_order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **dca_order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **dca_order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.start_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **dca_order.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order.daily_average**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      daily_average: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order.min_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order.max_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order.min_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_value?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order.max_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_value?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order.user_exchange_keys_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_exchange_keys_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.primary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order.enabled_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      enabled_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dca_order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **dca_order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **dca_order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.start_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **dca_order.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order.daily_average**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      daily_average?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order.min_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order.max_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order.min_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      min_value?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order.max_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      max_value?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order.user_exchange_keys_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_exchange_keys_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.primary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order.enabled_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      enabled_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'dca_order_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **dca_order_history**
   * - Table in database
   */
  export namespace dca_order_history {
    export type Table = 'dca_order_history';
    export interface Selectable {
      /**
      * **dca_order_history.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **dca_order_history.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **dca_order_history.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **dca_order_history.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **dca_order_history.dca_order_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      dca_order_uid: string;
      /**
      * **dca_order_history.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid: string | null;
      /**
      * **dca_order_history.market_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_price: number;
      /**
      * **dca_order_history.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number;
      /**
      * **dca_order_history.target_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      target_value: number;
      /**
      * **dca_order_history.available_balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      available_balance: number;
      /**
      * **dca_order_history.created_order**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      created_order: boolean;
      /**
      * **dca_order_history.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **dca_order_history.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **dca_order_history.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
      /**
      * **dca_order_history.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
    }
    export interface JSONSelectable {
      /**
      * **dca_order_history.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **dca_order_history.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **dca_order_history.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **dca_order_history.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **dca_order_history.dca_order_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      dca_order_uid: string;
      /**
      * **dca_order_history.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid: string | null;
      /**
      * **dca_order_history.market_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_price: number;
      /**
      * **dca_order_history.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number;
      /**
      * **dca_order_history.target_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      target_value: number;
      /**
      * **dca_order_history.available_balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      available_balance: number;
      /**
      * **dca_order_history.created_order**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      created_order: boolean;
      /**
      * **dca_order_history.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **dca_order_history.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **dca_order_history.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
      /**
      * **dca_order_history.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
    }
    export interface Whereable {
      /**
      * **dca_order_history.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.dca_order_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      dca_order_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.market_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.target_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      target_value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.available_balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      available_balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.created_order**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      created_order?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dca_order_history.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dca_order_history.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order_history.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **dca_order_history.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **dca_order_history.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order_history.dca_order_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      dca_order_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order_history.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **dca_order_history.market_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order_history.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order_history.target_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      target_value: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order_history.available_balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      available_balance: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order_history.created_order**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      created_order: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **dca_order_history.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order_history.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dca_order_history.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dca_order_history.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dca_order_history.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order_history.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **dca_order_history.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **dca_order_history.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order_history.dca_order_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      dca_order_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order_history.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **dca_order_history.market_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order_history.market_offset**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      market_offset?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order_history.target_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      target_value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order_history.available_balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      available_balance?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order_history.created_order**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      created_order?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **dca_order_history.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order_history.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dca_order_history.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dca_order_history.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'dca_order_history_pkey' | 'unique_dca_order';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **exchange**
   * - Table in database
   */
  export namespace exchange {
    export type Table = 'exchange';
    export interface Selectable {
      /**
      * **exchange.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **exchange.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **exchange.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **exchange.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **exchange.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **exchange.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **exchange.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **exchange.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **exchange.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **exchange.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **exchange.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exchange.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exchange.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **exchange.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **exchange.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exchange.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exchange.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exchange.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **exchange.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **exchange.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exchange.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'exchange_pkey' | 'unique_exchange_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **exchange_asset**
   * - Table in database
   */
  export namespace exchange_asset {
    export type Table = 'exchange_asset';
    export interface Selectable {
      /**
      * **exchange_asset.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **exchange_asset.asset_symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string;
      /**
      * **exchange_asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **exchange_asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **exchange_asset.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **exchange_asset.asset_symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string;
      /**
      * **exchange_asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **exchange_asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **exchange_asset.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange_asset.asset_symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      asset_symbol?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange_asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exchange_asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exchange_asset.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exchange_asset.asset_symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exchange_asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **exchange_asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exchange_asset.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exchange_asset.asset_symbol**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      asset_symbol?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exchange_asset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **exchange_asset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'exchange_asset_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **market**
   * - Table in database
   */
  export namespace market {
    export type Table = 'market';
    export interface Selectable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **market.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'market_pkey' | 'unique_market_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **market_price**
   * - Table in database
   */
  export namespace market_price {
    export type Table = 'market_price';
    export interface Selectable {
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: Date;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **market_price.source_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      source_price: number;
      /**
      * **market_price.source_currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      source_currency: string;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **market_price.asset_symbol**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string;
      /**
      * **market_price.currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      currency: string;
    }
    export interface JSONSelectable {
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: db.TimestampTzString;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string;
      /**
      * **market_price.source_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      source_price: number;
      /**
      * **market_price.source_currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      source_currency: string;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **market_price.asset_symbol**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string;
      /**
      * **market_price.currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      currency: string;
    }
    export interface Whereable {
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.source_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      source_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.source_currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      source_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.asset_symbol**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_symbol?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **market_price.currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market_price.source_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      source_price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **market_price.source_currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      source_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **market_price.asset_symbol**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_symbol: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **market_price.currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      currency: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **market_price.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **market_price.market_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      market_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market_price.source_price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      source_price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **market_price.source_currency**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      source_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market_price.fx_rate**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fx_rate?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **market_price.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **market_price.asset_symbol**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_symbol?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **market_price.currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'market_price_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **order**
   * - Table in database
   */
  export namespace order {
    export type Table = 'order';
    export interface Selectable {
      /**
      * **order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **order.order_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      order_id: string;
      /**
      * **order.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **order.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **order.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number;
      /**
      * **order.opened_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      opened_at: Date;
      /**
      * **order.closed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      closed_at: Date | null;
      /**
      * **order.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
      /**
      * **order.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface JSONSelectable {
      /**
      * **order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **order.order_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      order_id: string;
      /**
      * **order.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **order.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **order.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number;
      /**
      * **order.opened_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      opened_at: db.TimestampTzString;
      /**
      * **order.closed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      closed_at: db.TimestampTzString | null;
      /**
      * **order.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
      /**
      * **order.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface Whereable {
      /**
      * **order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.order_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      order_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.opened_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      opened_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.closed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **order.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.order_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      order_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **order.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **order.opened_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      opened_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **order.closed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **order.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **order.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **order.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **order.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **order.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.order_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      order_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **order.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **order.opened_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      opened_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **order.closed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **order.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **order.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'order_pkey' | 'unique_exchange_order_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **trade**
   * - Table in database
   */
  export namespace trade {
    export type Table = 'trade';
    export interface Selectable {
      /**
      * **trade.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **trade.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **trade.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **trade.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: Date;
      /**
      * **trade.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **trade.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **trade.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid: string | null;
      /**
      * **trade.trade_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      trade_id: string;
      /**
      * **trade.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **trade.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **trade.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number;
      /**
      * **trade.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **trade.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
      /**
      * **trade.fee**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fee: number;
      /**
      * **trade.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
      /**
      * **trade.total_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      total_value: number;
    }
    export interface JSONSelectable {
      /**
      * **trade.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **trade.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **trade.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **trade.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: db.TimestampTzString;
      /**
      * **trade.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **trade.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **trade.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid: string | null;
      /**
      * **trade.trade_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      trade_id: string;
      /**
      * **trade.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **trade.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string;
      /**
      * **trade.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number;
      /**
      * **trade.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **trade.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
      /**
      * **trade.fee**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fee: number;
      /**
      * **trade.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string;
      /**
      * **trade.total_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      total_value: number;
    }
    export interface Whereable {
      /**
      * **trade.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.trade_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      trade_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.fee**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **trade.total_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      total_value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **trade.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **trade.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **trade.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **trade.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **trade.trade_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      trade_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **trade.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **trade.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **trade.fee**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fee: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **trade.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **trade.total_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      total_value: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **trade.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **trade.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **trade.timestamp**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      timestamp?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **trade.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.order_uid**
      * - `uuid` in database
      * - Nullable, no default
      */
      order_uid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **trade.trade_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      trade_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.primary_currency**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      primary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.volume**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **trade.price**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **trade.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **trade.fee**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      fee?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **trade.secondary_currency**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secondary_currency?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **trade.total_value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      total_value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'trade_pkey' | 'unique_trade_exchange_trade_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user**
   * - Table in database
   */
  export namespace user {
    export type Table = 'user';
    export interface Selectable {
      /**
      * **user.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user.email_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      email_keyring_id: number;
      /**
      * **user.email_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_encrypted: string;
      /**
      * **user.email_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_hash: string;
      /**
      * **user.password_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password_hash: string;
      /**
      * **user.email_verified**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      email_verified: boolean;
    }
    export interface JSONSelectable {
      /**
      * **user.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user.email_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      email_keyring_id: number;
      /**
      * **user.email_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_encrypted: string;
      /**
      * **user.email_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_hash: string;
      /**
      * **user.password_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password_hash: string;
      /**
      * **user.email_verified**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      email_verified: boolean;
    }
    export interface Whereable {
      /**
      * **user.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      email_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.password_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email_verified**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      email_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user.email_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      email_keyring_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **user.email_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_encrypted: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.email_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.password_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.email_verified**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      email_verified: boolean | db.Parameter<boolean> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user.email_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      email_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **user.email_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.email_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.password_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.email_verified**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      email_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_user_email_hash' | 'user_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_2fa**
   * - Table in database
   */
  export namespace user_2fa {
    export type Table = 'user_2fa';
    export interface Selectable {
      /**
      * **user_2fa.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_2fa.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user_2fa.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user_2fa.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_2fa.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user_2fa.secret_encrypted**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_encrypted: string;
      /**
      * **user_2fa.secret_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      secret_keyring_id: number;
    }
    export interface JSONSelectable {
      /**
      * **user_2fa.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_2fa.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user_2fa.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_2fa.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_2fa.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user_2fa.secret_encrypted**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_encrypted: string;
      /**
      * **user_2fa.secret_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      secret_keyring_id: number;
    }
    export interface Whereable {
      /**
      * **user_2fa.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.secret_encrypted**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_2fa.secret_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      secret_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_2fa.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_2fa.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_2fa.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_2fa.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_2fa.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_2fa.secret_encrypted**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_encrypted: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_2fa.secret_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      secret_keyring_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_2fa.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_2fa.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_2fa.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_2fa.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_2fa.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_2fa.secret_encrypted**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_2fa.secret_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      secret_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_user_2fa_user_uid' | 'user_2fa_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_device**
   * - Table in database
   */
  export namespace user_device {
    export type Table = 'user_device';
    export interface Selectable {
      /**
      * **user_device.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_device.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user_device.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user_device.accessed_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      accessed_at: Date;
      /**
      * **user_device.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_device.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user_device.device_id_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      device_id_hash: string;
      /**
      * **user_device.trusted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      trusted: boolean;
    }
    export interface JSONSelectable {
      /**
      * **user_device.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_device.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user_device.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_device.accessed_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      accessed_at: db.TimestampTzString;
      /**
      * **user_device.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_device.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user_device.device_id_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      device_id_hash: string;
      /**
      * **user_device.trusted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      trusted: boolean;
    }
    export interface Whereable {
      /**
      * **user_device.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.accessed_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      accessed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.device_id_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      device_id_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_device.trusted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      trusted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_device.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_device.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_device.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_device.accessed_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      accessed_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_device.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_device.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_device.device_id_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      device_id_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_device.trusted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      trusted: boolean | db.Parameter<boolean> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_device.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_device.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_device.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_device.accessed_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      accessed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_device.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_device.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_device.device_id_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      device_id_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_device.trusted**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      trusted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_user_device_user_uid_device_id_hash' | 'user_device_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_email_verify**
   * - Table in database
   */
  export namespace user_email_verify {
    export type Table = 'user_email_verify';
    export interface Selectable {
      /**
      * **user_email_verify.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_email_verify.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user_email_verify.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user_email_verify.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_email_verify.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string;
    }
    export interface JSONSelectable {
      /**
      * **user_email_verify.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_email_verify.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user_email_verify.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_email_verify.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_email_verify.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string;
    }
    export interface Whereable {
      /**
      * **user_email_verify.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_email_verify.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_email_verify.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_email_verify.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_email_verify.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_email_verify.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_email_verify.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_email_verify.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_email_verify.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_email_verify.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_email_verify.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_email_verify.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_email_verify.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_email_verify.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_email_verify.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_user_email_verify_secret_hash' | 'unique_user_email_verify_user_uid' | 'user_email_verify_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_exchange_keys**
   * - Table in database
   */
  export namespace user_exchange_keys {
    export type Table = 'user_exchange_keys';
    export interface Selectable {
      /**
      * **user_exchange_keys.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_exchange_keys.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user_exchange_keys.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user_exchange_keys.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_exchange_keys.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **user_exchange_keys.keys_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      keys_keyring_id: number;
      /**
      * **user_exchange_keys.keys_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_encrypted: string;
      /**
      * **user_exchange_keys.keys_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_hash: string;
      /**
      * **user_exchange_keys.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **user_exchange_keys.invalidated_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      invalidated_at: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **user_exchange_keys.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_exchange_keys.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user_exchange_keys.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_exchange_keys.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_exchange_keys.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string;
      /**
      * **user_exchange_keys.keys_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      keys_keyring_id: number;
      /**
      * **user_exchange_keys.keys_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_encrypted: string;
      /**
      * **user_exchange_keys.keys_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_hash: string;
      /**
      * **user_exchange_keys.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **user_exchange_keys.invalidated_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      invalidated_at: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **user_exchange_keys.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.keys_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      keys_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.keys_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.keys_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_exchange_keys.invalidated_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      invalidated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_exchange_keys.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_exchange_keys.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_exchange_keys.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.keys_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      keys_keyring_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **user_exchange_keys.keys_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_encrypted: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.keys_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_exchange_keys.invalidated_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      invalidated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_exchange_keys.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_exchange_keys.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_exchange_keys.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.exchange_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      exchange_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.keys_keyring_id**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      keys_keyring_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **user_exchange_keys.keys_encrypted**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_encrypted?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.keys_hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      keys_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_exchange_keys.invalidated_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      invalidated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_exchange_keys_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_password_reset**
   * - Table in database
   */
  export namespace user_password_reset {
    export type Table = 'user_password_reset';
    export interface Selectable {
      /**
      * **user_password_reset.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_password_reset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **user_password_reset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **user_password_reset.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: Date;
      /**
      * **user_password_reset.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_password_reset.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string;
    }
    export interface JSONSelectable {
      /**
      * **user_password_reset.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string;
      /**
      * **user_password_reset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **user_password_reset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_password_reset.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: db.TimestampTzString;
      /**
      * **user_password_reset.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string;
      /**
      * **user_password_reset.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string;
    }
    export interface Whereable {
      /**
      * **user_password_reset.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_password_reset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_password_reset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_password_reset.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_password_reset.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_password_reset.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_password_reset.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_password_reset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_password_reset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_password_reset.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **user_password_reset.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_password_reset.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_password_reset.uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_password_reset.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_password_reset.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_password_reset.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **user_password_reset.user_uid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_uid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_password_reset.secret_hash**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      secret_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_user_password_reset_secret_hash' | 'user_password_reset_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = asset.Table | customer.Table | dca_order.Table | dca_order_history.Table | exchange.Table | exchange_asset.Table | market.Table | market_price.Table | order.Table | schema_migrations.Table | trade.Table | user.Table | user_2fa.Table | user_device.Table | user_email_verify.Table | user_exchange_keys.Table | user_password_reset.Table;
  export type Selectable = asset.Selectable | customer.Selectable | dca_order.Selectable | dca_order_history.Selectable | exchange.Selectable | exchange_asset.Selectable | market.Selectable | market_price.Selectable | order.Selectable | schema_migrations.Selectable | trade.Selectable | user.Selectable | user_2fa.Selectable | user_device.Selectable | user_email_verify.Selectable | user_exchange_keys.Selectable | user_password_reset.Selectable;
  export type JSONSelectable = asset.JSONSelectable | customer.JSONSelectable | dca_order.JSONSelectable | dca_order_history.JSONSelectable | exchange.JSONSelectable | exchange_asset.JSONSelectable | market.JSONSelectable | market_price.JSONSelectable | order.JSONSelectable | schema_migrations.JSONSelectable | trade.JSONSelectable | user.JSONSelectable | user_2fa.JSONSelectable | user_device.JSONSelectable | user_email_verify.JSONSelectable | user_exchange_keys.JSONSelectable | user_password_reset.JSONSelectable;
  export type Whereable = asset.Whereable | customer.Whereable | dca_order.Whereable | dca_order_history.Whereable | exchange.Whereable | exchange_asset.Whereable | market.Whereable | market_price.Whereable | order.Whereable | schema_migrations.Whereable | trade.Whereable | user.Whereable | user_2fa.Whereable | user_device.Whereable | user_email_verify.Whereable | user_exchange_keys.Whereable | user_password_reset.Whereable;
  export type Insertable = asset.Insertable | customer.Insertable | dca_order.Insertable | dca_order_history.Insertable | exchange.Insertable | exchange_asset.Insertable | market.Insertable | market_price.Insertable | order.Insertable | schema_migrations.Insertable | trade.Insertable | user.Insertable | user_2fa.Insertable | user_device.Insertable | user_email_verify.Insertable | user_exchange_keys.Insertable | user_password_reset.Insertable;
  export type Updatable = asset.Updatable | customer.Updatable | dca_order.Updatable | dca_order_history.Updatable | exchange.Updatable | exchange_asset.Updatable | market.Updatable | market_price.Updatable | order.Updatable | schema_migrations.Updatable | trade.Updatable | user.Updatable | user_2fa.Updatable | user_device.Updatable | user_email_verify.Updatable | user_exchange_keys.Updatable | user_password_reset.Updatable;
  export type UniqueIndex = asset.UniqueIndex | customer.UniqueIndex | dca_order.UniqueIndex | dca_order_history.UniqueIndex | exchange.UniqueIndex | exchange_asset.UniqueIndex | market.UniqueIndex | market_price.UniqueIndex | order.UniqueIndex | schema_migrations.UniqueIndex | trade.UniqueIndex | user.UniqueIndex | user_2fa.UniqueIndex | user_device.UniqueIndex | user_email_verify.UniqueIndex | user_exchange_keys.UniqueIndex | user_password_reset.UniqueIndex;
  export type Column = asset.Column | customer.Column | dca_order.Column | dca_order_history.Column | exchange.Column | exchange_asset.Column | market.Column | market_price.Column | order.Column | schema_migrations.Column | trade.Column | user.Column | user_2fa.Column | user_device.Column | user_email_verify.Column | user_exchange_keys.Column | user_password_reset.Column;
  export type AllBaseTables = [asset.Table, customer.Table, dca_order.Table, dca_order_history.Table, exchange.Table, exchange_asset.Table, market.Table, market_price.Table, order.Table, schema_migrations.Table, trade.Table, user.Table, user_2fa.Table, user_device.Table, user_email_verify.Table, user_exchange_keys.Table, user_password_reset.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [asset.Table, customer.Table, dca_order.Table, dca_order_history.Table, exchange.Table, exchange_asset.Table, market.Table, market_price.Table, order.Table, schema_migrations.Table, trade.Table, user.Table, user_2fa.Table, user_device.Table, user_email_verify.Table, user_exchange_keys.Table, user_password_reset.Table];


  export type SelectableForTable<T extends Table> = {
    asset: asset.Selectable;
    customer: customer.Selectable;
    dca_order: dca_order.Selectable;
    dca_order_history: dca_order_history.Selectable;
    exchange: exchange.Selectable;
    exchange_asset: exchange_asset.Selectable;
    market: market.Selectable;
    market_price: market_price.Selectable;
    order: order.Selectable;
    schema_migrations: schema_migrations.Selectable;
    trade: trade.Selectable;
    user: user.Selectable;
    user_2fa: user_2fa.Selectable;
    user_device: user_device.Selectable;
    user_email_verify: user_email_verify.Selectable;
    user_exchange_keys: user_exchange_keys.Selectable;
    user_password_reset: user_password_reset.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    asset: asset.JSONSelectable;
    customer: customer.JSONSelectable;
    dca_order: dca_order.JSONSelectable;
    dca_order_history: dca_order_history.JSONSelectable;
    exchange: exchange.JSONSelectable;
    exchange_asset: exchange_asset.JSONSelectable;
    market: market.JSONSelectable;
    market_price: market_price.JSONSelectable;
    order: order.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
    trade: trade.JSONSelectable;
    user: user.JSONSelectable;
    user_2fa: user_2fa.JSONSelectable;
    user_device: user_device.JSONSelectable;
    user_email_verify: user_email_verify.JSONSelectable;
    user_exchange_keys: user_exchange_keys.JSONSelectable;
    user_password_reset: user_password_reset.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    asset: asset.Whereable;
    customer: customer.Whereable;
    dca_order: dca_order.Whereable;
    dca_order_history: dca_order_history.Whereable;
    exchange: exchange.Whereable;
    exchange_asset: exchange_asset.Whereable;
    market: market.Whereable;
    market_price: market_price.Whereable;
    order: order.Whereable;
    schema_migrations: schema_migrations.Whereable;
    trade: trade.Whereable;
    user: user.Whereable;
    user_2fa: user_2fa.Whereable;
    user_device: user_device.Whereable;
    user_email_verify: user_email_verify.Whereable;
    user_exchange_keys: user_exchange_keys.Whereable;
    user_password_reset: user_password_reset.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    asset: asset.Insertable;
    customer: customer.Insertable;
    dca_order: dca_order.Insertable;
    dca_order_history: dca_order_history.Insertable;
    exchange: exchange.Insertable;
    exchange_asset: exchange_asset.Insertable;
    market: market.Insertable;
    market_price: market_price.Insertable;
    order: order.Insertable;
    schema_migrations: schema_migrations.Insertable;
    trade: trade.Insertable;
    user: user.Insertable;
    user_2fa: user_2fa.Insertable;
    user_device: user_device.Insertable;
    user_email_verify: user_email_verify.Insertable;
    user_exchange_keys: user_exchange_keys.Insertable;
    user_password_reset: user_password_reset.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    asset: asset.Updatable;
    customer: customer.Updatable;
    dca_order: dca_order.Updatable;
    dca_order_history: dca_order_history.Updatable;
    exchange: exchange.Updatable;
    exchange_asset: exchange_asset.Updatable;
    market: market.Updatable;
    market_price: market_price.Updatable;
    order: order.Updatable;
    schema_migrations: schema_migrations.Updatable;
    trade: trade.Updatable;
    user: user.Updatable;
    user_2fa: user_2fa.Updatable;
    user_device: user_device.Updatable;
    user_email_verify: user_email_verify.Updatable;
    user_exchange_keys: user_exchange_keys.Updatable;
    user_password_reset: user_password_reset.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    asset: asset.UniqueIndex;
    customer: customer.UniqueIndex;
    dca_order: dca_order.UniqueIndex;
    dca_order_history: dca_order_history.UniqueIndex;
    exchange: exchange.UniqueIndex;
    exchange_asset: exchange_asset.UniqueIndex;
    market: market.UniqueIndex;
    market_price: market_price.UniqueIndex;
    order: order.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
    trade: trade.UniqueIndex;
    user: user.UniqueIndex;
    user_2fa: user_2fa.UniqueIndex;
    user_device: user_device.UniqueIndex;
    user_email_verify: user_email_verify.UniqueIndex;
    user_exchange_keys: user_exchange_keys.UniqueIndex;
    user_password_reset: user_password_reset.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    asset: asset.Column;
    customer: customer.Column;
    dca_order: dca_order.Column;
    dca_order_history: dca_order_history.Column;
    exchange: exchange.Column;
    exchange_asset: exchange_asset.Column;
    market: market.Column;
    market_price: market_price.Column;
    order: order.Column;
    schema_migrations: schema_migrations.Column;
    trade: trade.Column;
    user: user.Column;
    user_2fa: user_2fa.Column;
    user_device: user_device.Column;
    user_email_verify: user_email_verify.Column;
    user_exchange_keys: user_exchange_keys.Column;
    user_password_reset: user_password_reset.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    asset: asset.SQL;
    customer: customer.SQL;
    dca_order: dca_order.SQL;
    dca_order_history: dca_order_history.SQL;
    exchange: exchange.SQL;
    exchange_asset: exchange_asset.SQL;
    market: market.SQL;
    market_price: market_price.SQL;
    order: order.SQL;
    schema_migrations: schema_migrations.SQL;
    trade: trade.SQL;
    user: user.SQL;
    user_2fa: user_2fa.SQL;
    user_device: user_device.SQL;
    user_email_verify: user_email_verify.SQL;
    user_exchange_keys: user_exchange_keys.SQL;
    user_password_reset: user_password_reset.SQL;
  }[T];

}
